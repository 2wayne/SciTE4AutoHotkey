#ClipboardTimeout Milliseconds
#ErrorStdOut
#HotkeyInterval Value
#HotkeyModifierTimeout Milliseconds
#Hotstring NewOptions
#If [expression]
#IfTimeout timeout
#IfWinActive [WinTitle, WinText]
#IfWinExist [WinTitle, WinText]
#IfWinNotActive [WinTitle, WinText]
#IfWinNotExist [WinTitle, WinText]
#Include FileName
#IncludeAgain FileName
#InputLevel [Level]
#InstallKeybdHook
#InstallMouseHook
#KeyHistory MaxEvents
#MaxHotkeysPerInterval Value
#MaxThreads Value
#MaxThreadsBuffer On|Off
#MaxThreadsPerHotkey Value
#MenuMaskKey keyname
#MustDeclare [On|Off]
#NoTrayIcon
#Persistent
#SingleInstance [Force|Ignore|Off]
#UseHook [On|Off]
#Warn [WarningType, WarningMode]
#WinActivateForce

if Expression\n{\n	commands\n}
else \n{\n	commands\n}
Loop [, Count]\nLoop Files, FilePattern [, F|D|R]\nLoop Parse, InputVar [, Delimiters, OmitChars]\nLoop Read, InputFile [, OutputFile]\nLoop Reg, RootKey\Key [, V|K|R]\n{\n	commands\n}
while Expression\n{\n	commands\n}
until Expression
for key [,val] in obj\n{\n	commands\n}
try \n{\n	commands\n}
catch [OutputVar] \n{\n	commands\n}
throw Exception
finally \n{\n	commands\n}
return Expression
class ClassName [extends BaseClassName] \n{\n	definitions\n}
break [LoopLabelOrNestIndex]
continue [LoopLabelOrNestIndex]
gosub Label
goto Label
static [Variable := Expression]
global [Variable := Expression]
local [Variable := Expression]
var Variable [:= Expression]

and
or
not
is
contains
in
extends
new

__Call([params...]) 'Call' meta-function of a class or object.
__Delete() Destructor method of a class or object.
__Get([params...]) 'Get' meta-function of a class or object.
__New([params...]) Constructor method of a class or object.
__Set([params...,] value) 'Set' meta-function of a class or object.
_NewEnum() Object method which returns an enumerator object, required by the for command.
Abs(Number) Returns the absolute value of Number.
ACos(Number) Returns the arcosine in radians.
Array([Item1, Item2, ..., ItemN]) Creates a simple sequential array.
ASin(Number) Returns the arcsine in radians.
ATan(Number) Returns the arctangent in radians.
BlockInput(true|false|"Send|Mouse|SendAndMouse|Default|MouseMove|MouseMoveOff") Disables or reenables the user's ability to interact with the computer via keyboard and mouse.
Ceil(Number) Returns Number rounded up to the nearest integer.
Chr(Number) Returns the character corresponding to the Unicode character code indicated by Number.
Click([Parameters]) Simulates clicks and other mouse operations.
ClipWait([SecondsToWait, 1]) Waits until the clipboard contains data.
ComObjActive(ProgIdOrCLSID) Retrieves a running object that has been registered with OLE.
ComObjArray(VarType, Count1 [, Count2, ... Count8]) Creates a SafeArray for use with COM.
ComObjConnect(obj [, funcPrefixOrObj]) Listens to events from a COM object (omit the 2nd parameter to stop listening).
ComObjCreate(ProgIdOrCLSID [, IID]) Creates a COM object.
ComObject(VarType, Value [, Flags]) Wraps a value, SafeArray or COM object for use by the script or for passing to a COM method.
ComObject(DispPtr) Wraps or unwraps a raw IDispatch pointer for use by the script.
ComObjError([Enable]) Enables or disables notification of COM errors. If Enable is omitted, the current setting is returned.
ComObjFlags(ComObject [, NewFlags, Mask]) Retrieves or changes flags which control a COM wrapper object's behaviour.
ComObjGet(name) Returns a reference to an object provided by a COM component.
ComObjQuery(ComObject [, SID], IID) Queries a COM object for an interface or service.
ComObjType(ComObject [, "Name|IID"]) Retrieves type information for a COM object.
ComObjValue(ComObject) Retrieves the value or pointer stored in a COM wrapper object.
Control(Cmd [, Value, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]) Makes a variety of changes to a control.
ControlClick([ControlOrPos, WinTitle, WinText, WhichButton, ClickCount, Options, ExcludeTitle, ExcludeText]) Sends a mouse button or mouse wheel event to a control.
ControlFocus([Control, WinTitle, WinText, ExcludeTitle, ExcludeText]) Sets input focus to a given control on a window.
ControlGet(Cmd [, Value, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]) Retrieves various types of information about a control.
ControlGetFocus([WinTitle, WinText, ExcludeTitle, ExcludeText]) Retrieves which control of the target window has input focus, if any.
ControlGetPos([OutputVarX, OutputVarY, OutputVarWidth, OutputVarHeight, Control, WinTitle, WinText, ExcludeTitle, ExcludeText]) Retrieves the position and size of a control.
ControlGetText([Control, WinTitle, WinText, ExcludeTitle, ExcludeText]) Retrieves text from a control.
ControlMove(Control, X, Y, Width, Height [, WinTitle, WinText, ExcludeTitle, ExcludeText]) Moves or resizes a control.
ControlSend([Control, Keys, WinTitle, WinText, ExcludeTitle, ExcludeText]) Sends simulated keystrokes to a window or control.
ControlSendRaw([Control, Keys, WinTitle, WinText, ExcludeTitle, ExcludeText]) Sends simulated keystrokes to a window or control.
ControlSetText([Control, NewText, WinTitle, WinText, ExcludeTitle, ExcludeText]) Changes the text of a control.
CoordMode("ToolTip|Pixel|Mouse|Caret|Menu" [, "Screen|Window|Client"]) Sets coordinate mode for various commands to be relative to either the active window or the screen.
Cos(Angle) Returns the cosine of the specified angle (in radians).
Critical([Param]) Prevents the current thread from being interrupted by other threads.
DateAdd(DateTime, Time, TimeUnits) Adds or subtract time from a date-time value.
DateDiff(DateTime1, DateTime2, TimeUnits) Compares two date-time values and returns the difference.
Deref(String) Expands variable references and escape sequences contained inside other variables.
DetectHiddenText(true|false) Determines whether invisible text in a window is "seen" for the purpose of finding the window. This affects commands such as WinExist and WinActivate.
DetectHiddenWindows(true|false) Determines whether invisible windows are "seen" by the script.
DirCopy(Source, Dest [, Overwrite := false]) Copies a folder along with all its sub-folders and files (similar to xcopy).
DirCreate(DirName) Creates a directory/folder.
DirDelete(DirName [, Recurse := false]) Deletes a folder.
DirExist(FilePattern) Equivalent to FileExist(), but returns a blank value if FilePattern is not a directory.
DirMove(Source, Dest [, Flag := 0]) Moves a folder along with all its sub-folders and files. It can also rename a folder.
DirSelect([StartingFolder, Options, Prompt]) Displays a standard dialog that allows the user to select a folder.
DllCall("[DllFile\]Function" [, Type1, Arg1, Type2, Arg2, ..., "Cdecl ReturnType"]) Calls a function inside a DLL, such as a standard Windows API function.
Download(URL, Filename) Downloads a file from the Internet.
Drive(SubCommand [, Drive, Value]) Performs operations on a drive.
DriveGet(Cmd [, Value]) Retrieves various types of information about the computer's drive(s).
Edit() Opens the current script for editing in the associated editor.
EnvGet(EnvVarName) Retrieves an environment variable.
EnvSet(EnvVarName, Value) Writes a value to a variable contained in the environment.
Exception(Message [, What, Extra]) Creates an Exception object.
Exit([ExitCode]) Exits the current thread.
ExitApp([ExitCode]) Terminates the script unconditionally.
Exp(N) Returns the mathematical constant e raised to the specified number.
FileAppend([Text, Filename, Encoding]) Writes text to the end of a file (first creating the file, if necessary).
FileCopy(SourcePattern, DestPattern [, Overwrite := false]) Copies one or more files.
FileCreateShortcut(Target, LinkFile [, WorkingDir, Args, Description, IconFile, ShortcutKey, IconNumber, RunState]) Creates a shortcut (.lnk) file.
FileDelete(FilePattern) Deletes one or more files.
FileEncoding("UTF-8|UTF-8-RAW|UTF-16|UTF-16-RAW|CPnnn") Sets the default encoding for FileRead, Loop Read, FileAppend, and FileOpen.
FileExist(FilePattern) Checks whether FilePattern exists, returning its attributes (RASHNDOCT) if it does.
FileGetAttrib(Filename) Same as FileExist().
FileGetShortcut(LinkFile [, OutTarget, OutDir, OutArgs, OutDescription, OutIcon, OutIconNum, OutRunState]) Retrieves information about a shortcut (.lnk) file, such as its target file.
FileGetSize([Filename, Units]) Retrieves the size of a file.
FileGetTime([Filename, "M|C|A"]) Retrieves the datetime stamp of a file or folder.
FileGetVersion([Filename]) Retrieves the version of a file.
FileInstall(Source, Dest [, Overwrite := false]) Includes the specified file inside the compiled version of the script.
FileMove(SourcePattern, DestPattern [, Overwrite := false]) Moves or renames one or more files.
FileOpen(Filename, Flags [, Encoding]) Opens a file.\nAccess flags: r|w|a|rw|h\nSharing flags: -rwa\nUse * to disable EOL translations.
FileRead(Filename) Reads a file's contents.
FileRecycle(FilePattern) Sends a file or directory to the recycle bin, if possible.
FileRecycleEmpty([DriveLetter]) Empties the recycle bin.
FileSelect([Options, "RootDir\Filename", Prompt, Filter]) Displays a standard dialog that allows the user to open or save file(s).
FileSetAttrib(Attributes [, FilePattern, OperateOnFolders := 0, Recurse := false]) Changes the attributes of one or more files or folders. Wildcards are supported.
FileSetTime([YYYYMMDDHH24MISS, FilePattern, "M|C|A", OperateOnFolders := 0, Recurse := false]) Changes the datetime stamp of one or more files or folders. Wildcards are supported.
Floor(Number) Returns Number rounded down to the nearest integer.
FormatTime([YYYYMMDDHH24MISS, Format]) Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format.
Func(FuncName) Returns a reference to the specified function if it exists.
GetKeyName(Key) Retrieves the name/text of a key.
GetKeySC(Key) Retrieves the scan code of a key.
GetKeyState(KeyName [, Mode]) Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status.
GetKeyVK(Key) Retrieves the virtual key code of a key.
GroupActivate(GroupName [, "R"]) Activates the next window in a window group that was defined with GroupAdd.
GroupAdd(GroupName [, WinTitle, WinText, ExcludeTitle, ExcludeText]) Adds a window specification to a window group, creating the group if necessary.
GroupClose(GroupName [, "A|R"]) Closes the active window if it was just activated by GroupActivate or GroupDeactivate. It then activates the next window in the series. It can also close all windows in a group.
GroupDeactivate(GroupName [, "R"]) Similar to GroupActivate except activates the next window not in the group.
Gui(SubCommand [, Param2, Param3, Param4]) Creates and manages windows and controls. Such windows can be used as data entry forms or custom user interfaces.
GuiControl(SubCommand, ControlID [, Param3]) Makes a variety of changes to a control in a GUI window.
GuiControlGet([SubCommand, ControlID, Param3]) Retrieves various types of information about a control in a GUI window. 
Hotkey(KeyName [, LabelName, Options]) Creates, modifies, enables, or disables a hotkey while the script is running.
Hotkey("IfWinActive|IfWinExist" [, WinTitle, WinText]) Specifies or removes an #IfWinActive|#IfWinExist filter for subsequent Hotkey() calls.
Hotkey("If" [, Expression]) Specifies or removes an #If filter for subsequent Hotkey() calls.
IL_Add
IL_Create
IL_Destroy
ImageSearch
IniDelete
IniRead
IniWrite
Input
InputBox([Title, Prompt, Options, Default]) Displays an input box to ask the user to enter a string.
InStr(Haystack, Needle [, CaseSensitive := false, StartingPos := 1, Occurrence := 1]) Returns the position of an occurrence of the string Needle in the string Haystack.
IsByRef(Var) Checks whether the specified Var is a ByRef parameter and the caller supplied a variable.
IsFunc(FuncName) Checks whether the specified function exists in the script. If so, it returns one plus its number of minimum parameters.
IsLabel(LabelName) Checks whether the specified function exists in the script.
IsObject(Value) Checks whether the specified value is an object.
KeyHistory
KeyWait
ListHotkeys
ListLines
ListVars
Ln(N) Returns the natural (base-e) logarithm of the specified number.
Log(N) Returns the base-10 logarithm of the specified number.
LTrim(String [, OmitChars := " `t"]) Trims characters from the beginning of a string.
LV_Add
LV_Delete
LV_DeleteCol
LV_GetCount
LV_GetNext
LV_GetText
LV_Insert
LV_InsertCol
LV_Modify
LV_ModifyCol
LV_SetImageList
Menu
MenuSelect
Mod(Dividend, Divisor): Performs the modulo operation (division remainder).
MonitorGet([N, Left, Top, Right, Bottom]) Retrieves the bounding coordinates of monitor number N (or the primary monitor if omitted).
MonitorGetCount() Retrieves the total number of monitors.
MonitorGetName([N]) Retrieves the operating system's name for monitor number N (or the primary monitor if omitted).
MonitorGetPrimary() Retrieves the number of the primary monitor, which will be 1 in a single-monitor system.
MonitorGetWorkArea(N [, Left, Top, Right, Bottom]) Retrieves the working area of monitor number N (or the primary monitor if omitted).
MouseClick
MouseClickDrag
MouseGetPos([OutputVarX, OutputVarY, OutputVarWin, OutputVarControl, 1|2|3]) Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over.
MouseMove
MsgBox([Options, Title, Text, Timeout]) Displays the specified text in a small window containing one or more buttons (such as Yes and No).
MsgBox(Text) Displays the specified text in a small window containing one or more buttons (such as Yes and No).
NumGet(VarOrAddress [, Offset := 0][, Type := "UPtr"]) Returns the binary number stored at the specified address+offset.
NumPut(Number, VarOrAddress [, Offset := 0][, Type := "UPtr"]) Stores a number in binary format at the specified address+offset.
ObjAddRef
ObjClone
Object([Key1, Value1, Key2, Value2, ...]) Creates a scriptable associative array.
ObjGetAddress
ObjGetCapacity
ObjHasKey
ObjInsert
ObjMaxIndex
ObjMinIndex
ObjNewEnum
ObjRelease
ObjRemove
ObjSetCapacity
OnMessage(MsgNumber [, FunctionNameOrRef]) Monitors a message/event.
Ord(String) Returns the ordinal value of the first Unicode character in String.
OutputDebug
PixelGetColor
PixelSearch
PostMessage
ProcessClose
ProcessExist
ProcessList
ProcessSetPriority
ProcessWait
ProcessWaitClose
Random
RegDelete
RegExMatch(Haystack, RegEx [, OutputVar, StartingPosition := 1]) Determines whether a string contains a pattern (regular expression).
RegExReplace(Haystack, NeedleRegEx [, Replacement := "", OutputVarCount := "", Limit := -1, StartingPosition := 1]) Replaces occurrences of a pattern (regular expression) inside a string.
RegisterCallback(FunctionName [, Options, ParamCount, EventInfo]) Creates a machine-code address that when called, redirects the call to a function in the script.
RegRead
RegWrite
Reload
Round(Number [, N := 0]) Rounds a number to the specified decimal place (can be negative)
RTrim(String [, OmitChars := " `t"]) Trims characters from the end of a string.
Run(Target [, WorkingDir, "Max|Min|Hide|UseErrorLevel", OutputVarPID]) Runs an external program.
RunAs
RunWait(Target [, WorkingDir, "Max|Min|Hide|UseErrorLevel", OutputVarPID]) Runs an external program and waits until it finishes before continuing.
SB_SetIcon
SB_SetParts
SB_SetText
Send(Keys) Sends simulated keystrokes and mouse clicks to the active window.
SendEvent(Keys) Sends simulated keystrokes and mouse clicks to the active window.
SendInput(Keys) Sends simulated keystrokes and mouse clicks to the active window.
SendLevel
SendMessage
SendMode("Input|Play|Event|InputThenPlay") Sets the default Send mode.
SendPlay(Keys) Sends simulated keystrokes and mouse clicks to the active window.
SendRaw(Keys) Sends simulated keystrokes and mouse clicks to the active window.
SetCapsLockState
SetControlDelay
SetDefaultMouseSpeed
SetKeyDelay
SetMouseDelay
SetNumLockState
SetRegView
SetScrollLockState
SetStoreCapsLockMode
SetTimer([Label, PeriodMS|"On"|"Off", Priority]) Causes a subroutine to be launched automatically and repeatedly at a specified time interval.
SetTitleMatchMode(1|2|3|"Fast"|"Slow") Sets the matching behavior of the WinTitle parameter in commands such as WinWait.
SetWinDelay(Delay) Sets the delay that will occur after each windowing command, such as WinActivate.
SetWorkingDir
Shutdown
Sin(Angle) Returns the sine of the specified angle (in radians).
Sleep(Milliseconds) Waits the specified amount of time before continuing.
Sort
SoundBeep
SoundGet
SoundPlay
SoundSet
SplitPath(Path [, OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive]) Separates a file name or URL into its name, directory, extension, and drive.
Sqrt(N) Returns the square root of the specified number.
StatusBarGetText
StatusBarWait
StrGet(Address [, Length][, Encoding]) Copies a string from a memory address, optionally converting it between code pages.
StringCaseSense
StrLen(String) Returns the length of String.
StrLower
StrPut(String Address [, Length][, Encoding]) Copies a string to a memory address, optionally converting it between code pages.
StrReplace(Haystack, SearchText [, ReplaceText, OutputVarCount, Limit := -1]) Replaces the specified substring with a new string.
StrSplit(String [, Delimiters, OmitChars]) Separates a string into an array of substrings using the specified delimiters.
StrUpper
SubStr(String, StartingPos [, Length]) Copies a substring from String.
SysGet
Tan(Angle) Returns the tangent of the specified angle (in radians).
Thread
ToolTip
TrayTip
Trim(String [, OmitChars := " `t"]) Trims characters from the beginning and end of a string.
TV_Add
TV_Delete
TV_Get
TV_GetChild
TV_GetCount
TV_GetNext
TV_GetParent
TV_GetPrev
TV_GetSelection
TV_GetText
TV_Modify
TV_SetImageList
Type
VarSetCapacity(Var [, RequestedCapacity, FillByte]) Enlarges a variable's holding capacity or frees its memory.
WinActivate([WinTitle, WinText, ExcludeTitle, ExcludeText]) Activates the specified window (makes it foremost).
WinActivateBottom
WinActive([WinTitle, WinText, ExcludeTitle, ExcludeText]) Checks if a matching window is active. Returns the Unique ID (HWND) of the first matching window.
WinClose([WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText]) Closes the specified window.
WinExist([WinTitle, WinText, ExcludeTitle, ExcludeText]) Checks if a matching window exists. Returns the Unique ID (HWND) of the first matching window.
WinGetClass
WinGetControls
WinGetControlsHwnd
WinGetCount
WinGetExStyle
WinGetID
WinGetIDLast
WinGetList
WinGetMinMax
WinGetPID
WinGetPos
WinGetProcessName
WinGetProcessPath
WinGetStyle
WinGetText
WinGetTitle([WinTitle, WinText, ExcludeTitle, ExcludeText]) Retrieves the title of the specified window.
WinGetTransColor
WinGetTransparent
WinHide([WinTitle, WinText, ExcludeTitle, ExcludeText]) Hides the specified window.
WinKill
WinMaximize([WinTitle, WinText, ExcludeTitle, ExcludeText]) Enlarges the specified window to its maximum size.
WinMinimize([WinTitle, WinText, ExcludeTitle, ExcludeText]) Collapses the specified window into a button on the task bar.
WinMinimizeAll
WinMinimizeAllUndo
WinMove(WinTitle, WinText, X, Y [, Width, Height, ExcludeTitle, ExcludeText]) Changes the position and/or size of the specified window.
WinMove(X, Y) Changes the position and/or size of the specified window.
WinMoveBottom
WinMoveTop
WinRedraw
WinRestore
WinSetAlwaysOnTop
WinSetEnabled
WinSetExStyle
WinSetRegion
WinSetStyle
WinSetTitle
WinSetTransColor
WinSetTransparent
WinShow
WinWait([WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]) Waits until the specified window exists.
WinWaitActive([WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]) Waits until the specified window is active.
WinWaitClose([WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]) Waits until the specified window does not exist.
WinWaitNotActive([WinTitle, WinText, Seconds, ExcludeTitle, ExcludeText]) Waits until the specified window is not active.

A_AhkPath
A_AhkVersion
A_AppData
A_AppDataCommon
A_Args
A_CaretX
A_CaretY
A_ComputerName
A_ComSpec
A_ControlDelay
A_Cursor
A_DD
A_DDD
A_DDDD
A_DefaultMouseSpeed
A_Desktop
A_DesktopCommon
A_DetectHiddenText
A_DetectWiddenWindows
A_EndChar
A_EventInfo
A_ExitReason
A_FileEncoding
A_FormatFloat
A_FormatInteger
A_Gui
A_GuiControl
A_GuiControlEvent
A_GuiEvent
A_GuiHeight
A_GuiWidth
A_GuiX
A_GuiY
A_Hour
A_IconFile
A_IconHidden
A_IconNumber
A_IconTip
A_Index
A_InitialWorkingDir
A_IPAddress1
A_IPAddress2
A_IPAddress3
A_IPAddress4
A_Is64bitOS
A_IsAdmin
A_IsCompiled
A_IsCritical
A_IsPaused
A_IsSuspended
A_IsUnicode
A_KeyDelay
A_Language
A_LastError
A_LineFile
A_LineNumber
A_LoopField
A_LoopFileAttrib
A_LoopFileDir
A_LoopFileExt
A_LoopFileFullPath
A_LoopFileName
A_LoopFilePath
A_LoopFileShortName
A_LoopFileShortPath
A_LoopFileSize
A_LoopFileSizeKB
A_LoopFileSizeMB
A_LoopFileTimeAccessed
A_LoopFileTimeCreated
A_LoopFileTimeModified
A_LoopReadLine
A_LoopRegKey
A_LoopRegName
A_LoopRegSubkey
A_LoopRegTimeModified
A_LoopRegType
A_MDay
A_Min
A_MM
A_MMM
A_MMMM
A_Mon
A_MouseDelay
A_MSec
A_MsgBoxResult
A_MyDocuments
A_Now
A_NowUTC
A_OSVersion
A_PriorHotkey
A_PriorKey
A_ProgramFiles
A_Programs
A_ProgramsCommon
A_PtrSize
A_RegView
A_ScreenDPI
A_ScreenHeight
A_ScreenWidth
A_ScriptDir
A_ScriptFullPath
A_ScriptHwnd
A_ScriptName
A_Sec
A_Space
A_StartMenu
A_StartMenuCommon
A_Startup
A_StartupCommon
A_StringCaseSense
A_Tab
A_Temp
A_ThisFunc
A_ThisHotkey
A_ThisLabel
A_ThisMenu
A_ThisMenuItem
A_ThisMenuItemPos
A_TickCount
A_TimeIdle
A_TimeIdlePhysical
A_TimeSincePriorHotkey
A_TimeSinceThisHotkey
A_TitleMatchMode
A_TitleMatchModeSpeed
A_UserName
A_WDay
A_WinDelay
A_WinDir
A_WorkingDir
A_YDay
A_Year
A_YWeek
A_YYYY
base
Clipboard
ClipboardAll
ErrorLevel
false
this
true
